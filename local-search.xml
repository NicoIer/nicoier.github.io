<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity场景Lightmap是否存在</title>
    <link href="/2025/07/22/Unity%E5%9C%BA%E6%99%AFLightmap%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/"/>
    <url>/2025/07/22/Unity%E5%9C%BA%E6%99%AFLightmap%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</url>
    
    <content type="html"><![CDATA[<p>判断当前激活的场景是否存在Lightmap，可以通过以下代码实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> dataAsset = Lightmapping.lightDataAsset;<br><span class="hljs-keyword">if</span>(dataAsset != <span class="hljs-literal">null</span> &amp;&amp; dataAsset.lightmaps != <span class="hljs-literal">null</span> &amp;&amp; dataAsset.lightmaps.Length &gt; <span class="hljs-number">0</span>)<br>&#123;<br>    Debug.Log(<span class="hljs-string">&quot;Lightmap exists in the scene.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    Debug.Log(<span class="hljs-string">&quot;No Lightmap found in the scene.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通常，在美术对场景编辑后，会有一系列处理流程，通过检查Lightmap的存在，可以确保场景的光照效果已经被正确烘焙。<br>结合自动化测试，可以在场景加载时自动检查Lightmap的存在性，确保场景的光照效果符合预期。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Lightmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity-Bloom-锯齿优化</title>
    <link href="/2025/07/15/Unity-Bloom-%E9%94%AF%E9%BD%BF%E4%BC%98%E5%8C%96/"/>
    <url>/2025/07/15/Unity-Bloom-%E9%94%AF%E9%BD%BF%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>Unity Bloom在降采样和上采样时使用的卷积核如下，是一个十字型的卷积核，这样会丢掉四个角落的像素信息，导致锯齿现象。 我们在上采样时,使用一个X型的卷积核心，将丢失的信息补充回来即可<br>$$<br>\begin{bmatrix}<br>0 &amp; 1 &amp; 0 \<br>1 &amp; 1 &amp; 1 \<br>0 &amp; 1 &amp; 0<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 1 \<br>0 &amp; 1 &amp; 0 \<br>1 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>这样做没有什么理论依据，但是效果很好</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Shader</tag>
      
      <tag>后处理</tag>
      
      <tag>Bloom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FMOD-Unity-Settings</title>
    <link href="/2025/07/10/FMOD-Unity-Settings/"/>
    <url>/2025/07/10/FMOD-Unity-Settings/</url>
    
    <content type="html"><![CDATA[<h1 id="FMOD-Unity-Settings"><a href="#FMOD-Unity-Settings" class="headerlink" title="FMOD Unity Settings"></a>FMOD Unity Settings</h1><p><a href="https://fmod.com/docs/2.03/unity/settings.html">官方文档</a></p><p>FMOD作为一个跨平台的音频引擎，在深度使用中经常会遇到一些手机上出现，电脑上无法复现的问题。<br>这里记录一下一些比较重要的配置，可以解决一些问题。</p><p><img src="/../img/FMOD%20Settings.png" alt="FMOD Settings.png"></p><h2 id="Platform-Specific-Android"><a href="#Platform-Specific-Android" class="headerlink" title="Platform Specific &#x2F; Android"></a>Platform Specific &#x2F; Android</h2><ul><li><p>OutputMode 这个选项是选择不同平台下使用的底层音频输出API </p><ul><li>Auto 这个选项会根据平台自动选择</li><li>No Sound 这个选项会禁用音频输出</li><li>Wav Writer 这个选项会将音频输出写入WAV文件</li><li>Java AudioTrack 这个选项会使用Android的AudioTrack API进行音频输出</li><li>OpenSL ES 这个选项会使用Android的OpenSL ES API进行音频输出</li><li>AAudio 这个选项会使用Android的AAudio API进行音频输出</li></ul></li><li><p>Virtual Channel Count  &amp; Real Channel Count  这两个选项是设置Android平台下的虚拟通道数和实际通道数。虚拟通道数是指FMOD内部使用的通道数，实际通道数是指Android系统实际使用的通道数。一般情况下，虚拟通道数应该大于等于实际通道数。Virtual Channel Count 是指可以播放的通道数，一旦超过了实际通道数，最安静的通道将被虚拟化，即不可听见。Real Channel Count 是指实际可听见的通道数。降低这个计数将减少 FMOD 混音器的 CPU 使用率。但是请注意，降低通道数可能会导致音频质量下降，或者在某些情况下，音频可能会被截断或丢失。<br>f Channels that will be audible. Lowering this count will reduce the FMOD mixer’s CPU usage. See the Virtual Voices white paper for more information.</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>FMOD</tag>
      
      <tag>音频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FMOD Unity 资源加载</title>
    <link href="/2025/07/07/FMOD-Unity-%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"/>
    <url>/2025/07/07/FMOD-Unity-%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="FMOD-Unity-资源加载"><a href="#FMOD-Unity-资源加载" class="headerlink" title="FMOD Unity 资源加载"></a>FMOD Unity 资源加载</h1><p>FMOD 是一个强大的音频引擎，广泛应用于游戏开发中。Unity 中使用 FMOD 时，资源的加载和管理是一个重要的环节。以下是一些关于 FMOD 在 Unity 中资源加载的基本知识。</p><h2 id="FMOD-Unity-资源加载-1"><a href="#FMOD-Unity-资源加载-1" class="headerlink" title="FMOD Unity 资源加载"></a>FMOD Unity 资源加载</h2><h3 id="默认资源加载方式"><a href="#默认资源加载方式" class="headerlink" title="默认资源加载方式"></a>默认资源加载方式</h3><p>FMOD For Unity的默认资源加载方式是 StreamingAssets。<br>在Unity Build时会将 “.bank” 文件 自动拷贝到 StreamingAssets 文件夹中。<br>它在游戏初始化的时候根据路径去SteamingAssets文件夹中加载音频资源。</p><h3 id="运行时加载"><a href="#运行时加载" class="headerlink" title="运行时加载"></a>运行时加载</h3><p>如果需要在运行时动态加载音频资源，可以使用 FMOD 的 API 来实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">RuntimeManager.LoadBank(<span class="hljs-string">&quot;path/to/bank.bank&quot;</span>, <span class="hljs-literal">true</span>);<br>RuntimeManager.LoadBank(<span class="hljs-string">&quot;path/to/bank.bytes&quot;</span>, <span class="hljs-literal">true</span>);<br><br>TextAsset textAsset = Resources.Load&lt;TextAsset&gt;(<span class="hljs-string">&quot;path/to/bank&quot;</span>);<br>RuntimeManager.LoadBank(textAsset, <span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></table></figure><h2 id="AssetBundle-加载"><a href="#AssetBundle-加载" class="headerlink" title="AssetBundle 加载"></a>AssetBundle 加载</h2><p>如果我们的游戏需要资源热更新，那么默认的 StreamingAssets 方式就不适用了。</p><ol><li>在FMOD Editor Settings 中 修改加载方式为 AssetBundle</li><li>FMOD会自动根据.bank文件生成对应的 “.bytes” 文件。<br>这些 “.bytes” 文件包含了音频数据和相关信息，可以在 Unity 中使用。</li><li>在Unity中创建一个AssetBundle，包含FMOD生成的 “.bytes” 文件。</li><li>在游戏运行时，通过 Unity 的 AssetBundle API 加载这些 “.bytes” 文件。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">AssetBundle assetBundle = AssetBundle.LoadFromFile(<span class="hljs-string">&quot;path/to/assetbundle&quot;</span>);<br>TextAssetk textAsset = assetBundle.LoadAsset&lt;TextAsset&gt;(<span class="hljs-string">&quot;bank.bytes&quot;</span>);<br>FMODUnity.RuntimeManager.LoadBank(bank, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>FMOD</tag>
      
      <tag>音频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Shader LOD</title>
    <link href="/2025/05/22/Unity-Shader-LOD/"/>
    <url>/2025/05/22/Unity-Shader-LOD/</url>
    
    <content type="html"><![CDATA[<h1 id="Shader-LOD"><a href="#Shader-LOD" class="headerlink" title="Shader LOD"></a>Shader LOD</h1><p>在移动端游戏上，常常会做很多优化工作，来让游戏在设备上流畅运行。<br>一般的方案有：降低模型的复杂度，降低纹理的分辨率，降低模型的LOD（Level of Detail）等。</p><p>针对不同的设备还有有画质分级</p><p>这里要讲的是Shader LOD:<br><a href="https://docs.unity.cn/cn/2022.3/Manual/SL-ShaderLOD.html">https://docs.unity.cn/cn/2022.3/Manual/SL-ShaderLOD.html</a></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Shader myShader = Shader.Find(<span class="hljs-string">&quot;MyShader&quot;</span>); <span class="hljs-comment">// 任何可以获得Shader对象的方法</span><br>myShader.maximumLOD = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 设置LOD为-1，表示能多大用多大</span><br><br>myShader.maximumLOD = <span class="hljs-number">100</span>; <span class="hljs-comment">// 设置LOD为100，表示只能使用LOD &lt;=100的Shader</span><br><br>myShader.maximumLOD = <span class="hljs-number">10</span>; <span class="hljs-comment">// 设置LOD为10，表示只能使用LOD &lt;=10的Shader</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shaderlab">Shader &quot;MyShader&quot;<br>&#123;<br>    // ... 其他的Shader内容...<br>    SubShader<br>    &#123;<br>        LOD 100<br>        <br>    // ... 其他的SubShader内容...    <br>    &#125;<br>    SubShader<br>    &#123;<br>        LOD 10<br>        <br>    // ... 其他的SubShader内容...    <br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>Shader LOD（Level of Detail）用于在不同的设备上使用不同的Shader版本，以优化性能和视觉效果。通过设置LOD值，Unity可以根据设备的性能自动选择合适的Shader版本，从而提高渲染效率。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Shader</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#深拷贝的ExpressionTree实现</title>
    <link href="/2024/08/31/C#%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2024/08/31/C#%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>C#中默认的拷贝是浅拷贝，浅拷贝只会复制对象的引用，而不会复制对象本身。深拷贝则会复制对象本身及其所有引用的对象。</p><p>有时候我们希望拷贝的对象不要影响原始对象，这时就需要使用深拷贝。深拷贝可以通过多种方式实现，包括手动编写复制代码、使用序列化和反序列化等。</p><p>这里提供一个基于表达式树的深拷贝实现，它可以高效地复制对象及其所有引用的对象。</p><h2 id="DeepCopyByExpressionTrees"><a href="#DeepCopyByExpressionTrees" class="headerlink" title="DeepCopyByExpressionTrees"></a>DeepCopyByExpressionTrees</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Linq.Expressions;<br><span class="hljs-keyword">using</span> System.Reflection;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">UnityToolkit</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 利用表达式树实现高效深复制</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DeepCopyByExpressionTrees</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">object</span> _isStructTypeToDeepCopyDictionaryLocker = <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>();<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;Type, <span class="hljs-built_in">bool</span>&gt; _isStructTypeToDeepCopyDictionary = <span class="hljs-keyword">new</span> Dictionary&lt;Type, <span class="hljs-built_in">bool</span>&gt;();<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">object</span> _compiledCopyFunctionsDictionaryLocker = <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>();<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;Type, Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt;&gt;<br>            _compiledCopyFunctionsDictionary =<br>                <span class="hljs-keyword">new</span> Dictionary&lt;Type, Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt;&gt;();<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Type _objectType = <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">object</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Type _objectDictionaryType = <span class="hljs-keyword">typeof</span>(Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;);<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 创建对象的深度拷贝</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>对象类型<span class="hljs-doctag">&lt;/typeparam&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;original&quot;&gt;</span>要复制的对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;copiedReferencesDict&quot;&gt;</span>已复制对象的字典（原始对象，拷贝）<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title">DeepCopy</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">this</span> T original, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt; copiedReferencesDict = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> (T)DeepCopyByExpressionTreeObj(original, <span class="hljs-literal">false</span>,<br>                copiedReferencesDict ?? <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;(<span class="hljs-keyword">new</span> ReferenceEqualityComparer()));<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">object</span> <span class="hljs-title">DeepCopyByExpressionTreeObj</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> original, <span class="hljs-built_in">bool</span> forceDeepCopy,</span></span><br><span class="hljs-params"><span class="hljs-function">            Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt; copiedReferencesDict</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (original == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> type = original.GetType();<br>            <span class="hljs-keyword">if</span> (IsDelegate(type))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!forceDeepCopy &amp;&amp; !IsTypeToDeepCopy(type))<br>            &#123;<br>                <span class="hljs-keyword">return</span> original;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (copiedReferencesDict.TryGetValue(original, <span class="hljs-keyword">out</span> <span class="hljs-built_in">object</span> alreadyCopiedObject))<br>            &#123;<br>                <span class="hljs-keyword">return</span> alreadyCopiedObject;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (type == _objectType)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>();<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> compiledCopyFunction = GetOrCreateCompiledLambdaCopyFunction(type);<br>            <span class="hljs-built_in">object</span> copy = compiledCopyFunction(original, copiedReferencesDict);<br>            <span class="hljs-keyword">return</span> copy;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt; GetOrCreateCompiledLambdaCopyFunction(Type type)<br>        &#123;<br>            <span class="hljs-comment">// 以下机构确保多个线程使用字典，即使字典被锁定且被其他线程更新</span><br>            <span class="hljs-comment">// 不修改旧的字典，每次都用新的实例替换</span><br>            <span class="hljs-keyword">if</span> (!_compiledCopyFunctionsDictionary.TryGetValue(type,<br>                    <span class="hljs-keyword">out</span> Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt; compiledCopyFunction))<br>            &#123;<br>                <span class="hljs-keyword">lock</span> (_compiledCopyFunctionsDictionaryLocker)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (!_compiledCopyFunctionsDictionary.TryGetValue(type, <span class="hljs-keyword">out</span> compiledCopyFunction))<br>                    &#123;<br>                        <span class="hljs-keyword">var</span> uncompiledCopyFunction = CreateCompiledLambdaCopyFunctionForType(type);<br><br>                        compiledCopyFunction = uncompiledCopyFunction.Compile();<br><br>                        <span class="hljs-keyword">var</span> dictionaryCopy =<br>                            _compiledCopyFunctionsDictionary.ToDictionary(pair =&gt; pair.Key, pair =&gt; pair.Value);<br><br>                        dictionaryCopy.Add(type, compiledCopyFunction);<br><br>                        _compiledCopyFunctionsDictionary = dictionaryCopy;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> compiledCopyFunction;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Expression&lt;Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt;&gt;<br>            CreateCompiledLambdaCopyFunctionForType(Type type)<br>        &#123;<br>            <span class="hljs-comment">// 初始化表达式和变量</span><br>            InitializeExpressions(type, <span class="hljs-keyword">out</span> ParameterExpression inputParameter, <span class="hljs-keyword">out</span> ParameterExpression inputDictionary,<br>                <span class="hljs-keyword">out</span> ParameterExpression outputVariable, <span class="hljs-keyword">out</span> ParameterExpression boxingVariable,<br>                <span class="hljs-keyword">out</span> LabelTarget endLabel, <span class="hljs-keyword">out</span> List&lt;ParameterExpression&gt; variables, <span class="hljs-keyword">out</span> List&lt;Expression&gt; expressions);<br>            <span class="hljs-comment">// 如果原始对象为空，则直接返回空值</span><br>            IfNullThenReturnNullExpression(inputParameter, endLabel, expressions);<br>            <span class="hljs-comment">// 浅拷贝原始对象</span><br>            MemberwiseCloneInputToOutputExpression(type, inputParameter, outputVariable, expressions);<br>            <span class="hljs-comment">// 将复制的对象存储到字典            </span><br>            <span class="hljs-keyword">if</span> (IsClassOtherThanString(type))<br>            &#123;<br>                StoreReferencesIntoDictionaryExpression(inputParameter, inputDictionary, outputVariable, expressions);<br>            &#125;<br><br>            <span class="hljs-comment">// 拷贝所有非值或非系统类型字段</span><br>            FieldsCopyExpressions(type, inputParameter, inputDictionary, outputVariable, boxingVariable, expressions);<br>            <span class="hljs-comment">// 拷贝数组元素</span><br>            <span class="hljs-keyword">if</span> (IsArray(type) &amp;&amp; IsTypeToDeepCopy(type.GetElementType()))<br>            &#123;<br>                CreateArrayCopyLoopExpression(type, inputParameter, inputDictionary, outputVariable, variables,<br>                    expressions);<br>            &#125;<br><br>            <span class="hljs-comment">// 将所有表达式合并到lambda函数中</span><br>            <span class="hljs-keyword">var</span> lambda = CombineAllIntoLambdaFunctionExpression(inputParameter, inputDictionary, outputVariable,<br>                endLabel, variables, expressions);<br>            <span class="hljs-keyword">return</span> lambda;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeExpressions</span>(<span class="hljs-params">Type type, <span class="hljs-keyword">out</span> ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">out</span> ParameterExpression inputDictionary, <span class="hljs-keyword">out</span> ParameterExpression outputVariable,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">out</span> ParameterExpression boxingVariable, <span class="hljs-keyword">out</span> LabelTarget endLabel, <span class="hljs-keyword">out</span> List&lt;ParameterExpression&gt; variables,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">out</span> List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            inputParameter = Expression.Parameter(_objectType);<br>            inputDictionary = Expression.Parameter(_objectDictionaryType);<br>            outputVariable = Expression.Variable(type);<br>            boxingVariable = Expression.Variable(_objectType);<br>            endLabel = Expression.Label();<br>            variables = <span class="hljs-keyword">new</span> List&lt;ParameterExpression&gt;();<br>            expressions = <span class="hljs-keyword">new</span> List&lt;Expression&gt;();<br>            variables.Add(outputVariable);<br>            variables.Add(boxingVariable);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">IfNullThenReturnNullExpression</span>(<span class="hljs-params">ParameterExpression inputParameter, LabelTarget endLabel,</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// if (input == null)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     return null;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// &#125;</span><br>            <span class="hljs-keyword">var</span> ifNullThenReturnNullExpression =<br>                Expression.IfThen(<br>                    Expression.Equal(<br>                        inputParameter,<br>                        Expression.Constant(<span class="hljs-literal">null</span>, _objectType)),<br>                    Expression.Return(endLabel));<br>            expressions.Add(ifNullThenReturnNullExpression);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MemberwiseCloneInputToOutputExpression</span>(<span class="hljs-params">Type type, ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression outputVariable, List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// var output = (<span class="hljs-doctag">&lt;type&gt;</span>)input.MemberwiseClone();           </span><br>            <span class="hljs-keyword">var</span> memberwiseCloneMethod =<br>                _objectType.GetMethod(<span class="hljs-string">&quot;MemberwiseClone&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);<br>            <span class="hljs-keyword">var</span> memberwiseCloneInputExpression =<br>                Expression.Assign(<br>                    outputVariable,<br>                    Expression.Convert(<br>                        Expression.Call(<br>                            inputParameter,<br>                            memberwiseCloneMethod),<br>                        type));<br>            expressions.Add(memberwiseCloneInputExpression);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">StoreReferencesIntoDictionaryExpression</span>(<span class="hljs-params">ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputDictionary, ParameterExpression outputVariable, List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// inputDictionary[(Object)input] = (Object)output;</span><br>            <span class="hljs-keyword">var</span> storeReferencesExpression =<br>                Expression.Assign(<br>                    Expression.Property(<br>                        inputDictionary,<br>                        _objectDictionaryType.GetProperty(<span class="hljs-string">&quot;Item&quot;</span>),<br>                        inputParameter),<br>                    Expression.Convert(outputVariable, _objectType));<br>            expressions.Add(storeReferencesExpression);<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Expression&lt;Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt;&gt;<br>            CombineAllIntoLambdaFunctionExpression(ParameterExpression inputParameter,<br>                ParameterExpression inputDictionary, ParameterExpression outputVariable, LabelTarget endLabel,<br>                List&lt;ParameterExpression&gt; variables, List&lt;Expression&gt; expressions)<br>        &#123;<br>            expressions.Add(Expression.Label(endLabel));<br>            expressions.Add(Expression.Convert(outputVariable, _objectType));<br>            <span class="hljs-keyword">var</span> finalBody = Expression.Block(variables, expressions);<br>            <span class="hljs-keyword">var</span> lambda =<br>                Expression.Lambda&lt;Func&lt;<span class="hljs-built_in">object</span>, Dictionary&lt;<span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;, <span class="hljs-built_in">object</span>&gt;&gt;(finalBody, inputParameter,<br>                    inputDictionary);<br>            <span class="hljs-keyword">return</span> lambda;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateArrayCopyLoopExpression</span>(<span class="hljs-params">Type type, ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputDictionary, ParameterExpression outputVariable,</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;ParameterExpression&gt; variables, List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// int i1, i2, ..., in; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// int length1 = inputarray.GetLength(0); </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// i1 = 0; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// while (true)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     if (i1 &gt;= length1)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         goto ENDLABELFORLOOP1;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     int length2 = inputarray.GetLength(1); </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     i2 = 0; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     while (true)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         if (i2 &gt;= length2)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//             goto ENDLABELFORLOOP2;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ...</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ...</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ...</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         int lengthn = inputarray.GetLength(n); </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         in = 0; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         while (true)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//             if (in &gt;= lengthn)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//             &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//                 goto ENDLABELFORLOOPn;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//             &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//             outputarray[i1, i2, ..., in] </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//                 = (<span class="hljs-doctag">&lt;elementType&gt;</span>)DeepCopyByExpressionTreeObj(</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//                        (Object)inputarray[i1, i2, ..., in])</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//             in++; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ENDLABELFORLOOPn:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ...</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ...  </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         ...</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         i2++; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     ENDLABELFORLOOP2:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     i1++; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// ENDLABELFORLOOP1:</span><br>            <span class="hljs-keyword">var</span> rank = type.GetArrayRank();<br>            <span class="hljs-keyword">var</span> indices = GenerateIndices(rank);<br>            variables.AddRange(indices);<br>            <span class="hljs-keyword">var</span> elementType = type.GetElementType();<br>            <span class="hljs-keyword">var</span> assignExpression = ArrayFieldToArrayFieldAssignExpression(inputParameter, inputDictionary,<br>                outputVariable, elementType, type, indices);<br>            Expression forExpression = assignExpression;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> dimension = <span class="hljs-number">0</span>; dimension &lt; rank; dimension++)<br>            &#123;<br>                <span class="hljs-keyword">var</span> indexVariable = indices[dimension];<br><br>                forExpression = LoopIntoLoopExpression(inputParameter, indexVariable, forExpression, dimension);<br>            &#125;<br><br>            expressions.Add(forExpression);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;ParameterExpression&gt; <span class="hljs-title">GenerateIndices</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> arrayRank</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// int i1, i2, ..., in; </span><br>            <span class="hljs-keyword">var</span> indices = <span class="hljs-keyword">new</span> List&lt;ParameterExpression&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arrayRank; i++)<br>            &#123;<br>                <span class="hljs-keyword">var</span> indexVariable = Expression.Variable(<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">int</span>));<br><br>                indices.Add(indexVariable);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> indices;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BinaryExpression <span class="hljs-title">ArrayFieldToArrayFieldAssignExpression</span>(<span class="hljs-params">ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputDictionary, ParameterExpression outputVariable, Type elementType, Type arrayType,</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;ParameterExpression&gt; indices</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// outputarray[i1, i2, ..., in] </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     = (<span class="hljs-doctag">&lt;elementType&gt;</span>)DeepCopyByExpressionTreeObj(</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//            (Object)inputarray[i1, i2, ..., in]);</span><br>            <span class="hljs-keyword">var</span> indexTo = Expression.ArrayAccess(outputVariable, indices);<br>            <span class="hljs-keyword">var</span> indexFrom = Expression.ArrayIndex(Expression.Convert(inputParameter, arrayType), indices);<br>            <span class="hljs-keyword">var</span> forceDeepCopy = elementType != _objectType;<br>            <span class="hljs-keyword">var</span> rightSide =<br>                Expression.Convert(<br>                    Expression.Call(<br>                        DeepCopyByExpressionTreeObjMethod,<br>                        Expression.Convert(indexFrom, _objectType),<br>                        Expression.Constant(forceDeepCopy, <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">bool</span>)),<br>                        inputDictionary),<br>                    elementType);<br><br>            <span class="hljs-keyword">var</span> assignExpression = Expression.Assign(indexTo, rightSide);<br>            <span class="hljs-keyword">return</span> assignExpression;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BlockExpression <span class="hljs-title">LoopIntoLoopExpression</span>(<span class="hljs-params">ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression indexVariable, Expression loopToEncapsulate, <span class="hljs-built_in">int</span> dimension</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// int length = inputarray.GetLength(dimension); </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// i = 0; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// while (true)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     if (i &gt;= length)</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     &#123;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//         goto ENDLABELFORLOOP;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     loopToEncapsulate;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//     i++; </span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// &#125;</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// ENDLABELFORLOOP:</span><br>            <span class="hljs-keyword">var</span> lengthVariable = Expression.Variable(<span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">int</span>));<br>            <span class="hljs-keyword">var</span> endLabelForThisLoop = Expression.Label();<br>            <span class="hljs-keyword">var</span> newLoop =<br>                Expression.Loop(Expression.Block(<span class="hljs-keyword">new</span> ParameterExpression[<span class="hljs-number">0</span>],<br>                        Expression.IfThen(Expression.GreaterThanOrEqual(indexVariable, lengthVariable),<br>                            Expression.Break(endLabelForThisLoop)),<br>                        loopToEncapsulate,<br>                        Expression.PostIncrementAssign(indexVariable)),<br>                    endLabelForThisLoop);<br><br>            <span class="hljs-keyword">var</span> lengthAssignment = GetLengthForDimensionExpression(lengthVariable, inputParameter, dimension);<br>            <span class="hljs-keyword">var</span> indexAssignment = Expression.Assign(indexVariable, Expression.Constant(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">return</span> Expression.Block(<span class="hljs-keyword">new</span>[] &#123; lengthVariable &#125;, lengthAssignment, indexAssignment, newLoop);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BinaryExpression <span class="hljs-title">GetLengthForDimensionExpression</span>(<span class="hljs-params">ParameterExpression lengthVariable,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputParameter, <span class="hljs-built_in">int</span> i</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// length = ((Array)input).GetLength(i); </span><br>            <span class="hljs-keyword">var</span> getLengthMethod = <span class="hljs-keyword">typeof</span>(Array).GetMethod(<span class="hljs-string">&quot;GetLength&quot;</span>, BindingFlags.Public | BindingFlags.Instance);<br>            <span class="hljs-keyword">var</span> dimensionConstant = Expression.Constant(i);<br><br>            <span class="hljs-keyword">return</span> Expression.Assign(lengthVariable, Expression.Call(Expression.Convert(inputParameter, <span class="hljs-keyword">typeof</span>(Array)),<br>                getLengthMethod, <span class="hljs-keyword">new</span>[] &#123; dimensionConstant &#125;));<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FieldsCopyExpressions</span>(<span class="hljs-params">Type type, ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputDictionary, ParameterExpression outputVariable, ParameterExpression boxingVariable,</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> fields = GetAllRelevantFields(type);<br>            <span class="hljs-keyword">var</span> readonlyFields = fields.Where(f =&gt; f.IsInitOnly).ToList();<br>            <span class="hljs-keyword">var</span> writableFields = fields.Where(f =&gt; !f.IsInitOnly).ToList();<br>            <span class="hljs-comment">// 只读字段拷贝（采用装箱操作）</span><br>            <span class="hljs-built_in">bool</span> shouldUseBoxing = readonlyFields.Any();<br>            <span class="hljs-keyword">if</span> (shouldUseBoxing)<br>            &#123;<br>                <span class="hljs-keyword">var</span> boxingExpression =<br>                    Expression.Assign(boxingVariable, Expression.Convert(outputVariable, _objectType));<br>                expressions.Add(boxingExpression);<br>            &#125;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> field <span class="hljs-keyword">in</span> readonlyFields)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (IsDelegate(field.FieldType))<br>                &#123;<br>                    ReadonlyFieldToNullExpression(field, boxingVariable, expressions);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ReadonlyFieldCopyExpression(type, field, inputParameter, inputDictionary, boxingVariable,<br>                        expressions);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (shouldUseBoxing)<br>            &#123;<br>                <span class="hljs-keyword">var</span> unboxingExpression = Expression.Assign(outputVariable, Expression.Convert(boxingVariable, type));<br>                expressions.Add(unboxingExpression);<br>            &#125;<br><br>            <span class="hljs-comment">// 非只读字段拷贝</span><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> field <span class="hljs-keyword">in</span> writableFields)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (IsDelegate(field.FieldType))<br>                &#123;<br>                    WritableFieldToNullExpression(field, outputVariable, expressions);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    WritableFieldCopyExpression(type, field, inputParameter, inputDictionary, outputVariable,<br>                        expressions);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> FieldInfo[] <span class="hljs-title">GetAllRelevantFields</span>(<span class="hljs-params">Type type, <span class="hljs-built_in">bool</span> forceAllFields = <span class="hljs-literal">false</span></span>)</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> fieldsList = <span class="hljs-keyword">new</span> List&lt;FieldInfo&gt;();<br>            <span class="hljs-keyword">var</span> typeCache = type;<br>            <span class="hljs-keyword">while</span> (typeCache != <span class="hljs-literal">null</span>)<br>            &#123;<br>                fieldsList.AddRange(typeCache<br>                    .GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic |<br>                               BindingFlags.FlattenHierarchy)<br>                    .Where(field =&gt; forceAllFields || IsTypeToDeepCopy(field.FieldType)));<br>                typeCache = typeCache.BaseType;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> fieldsList.ToArray();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> FieldInfo[] <span class="hljs-title">GetAllFields</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> GetAllRelevantFields(type, forceAllFields: <span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Type FieldInfoType = <span class="hljs-keyword">typeof</span>(FieldInfo);<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> MethodInfo SetValueMethod =<br>            FieldInfoType.GetMethod(<span class="hljs-string">&quot;SetValue&quot;</span>, <span class="hljs-keyword">new</span>[] &#123; _objectType, _objectType &#125;);<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReadonlyFieldToNullExpression</span>(<span class="hljs-params">FieldInfo field, ParameterExpression boxingVariable,</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// fieldInfo.SetValue(boxing, <span class="hljs-doctag">&lt;fieldtype&gt;</span>null);</span><br>            <span class="hljs-keyword">var</span> fieldToNullExpression =<br>                Expression.Call(<br>                    Expression.Constant(field),<br>                    SetValueMethod,<br>                    boxingVariable,<br>                    Expression.Constant(<span class="hljs-literal">null</span>, field.FieldType));<br><br>            expressions.Add(fieldToNullExpression);<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Type ThisType = <span class="hljs-keyword">typeof</span>(DeepCopyByExpressionTrees);<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> MethodInfo DeepCopyByExpressionTreeObjMethod =<br>            ThisType.GetMethod(<span class="hljs-string">&quot;DeepCopyByExpressionTreeObj&quot;</span>, BindingFlags.NonPublic | BindingFlags.Static);<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReadonlyFieldCopyExpression</span>(<span class="hljs-params">Type type, FieldInfo field, ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputDictionary, ParameterExpression boxingVariable, List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// fieldInfo.SetValue(boxing, DeepCopyByExpressionTreeObj((Object)((<span class="hljs-doctag">&lt;type&gt;</span>)input).<span class="hljs-doctag">&lt;field&gt;</span>))</span><br>            <span class="hljs-keyword">var</span> fieldFrom = Expression.Field(Expression.Convert(inputParameter, type), field);<br>            <span class="hljs-keyword">var</span> forceDeepCopy = field.FieldType != _objectType;<br>            <span class="hljs-keyword">var</span> fieldDeepCopyExpression =<br>                Expression.Call(Expression.Constant(field, FieldInfoType), SetValueMethod, boxingVariable,<br>                    Expression.Call(DeepCopyByExpressionTreeObjMethod, Expression.Convert(fieldFrom, _objectType),<br>                        Expression.Constant(forceDeepCopy, <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">bool</span>)),<br>                        inputDictionary));<br>            expressions.Add(fieldDeepCopyExpression);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WritableFieldToNullExpression</span>(<span class="hljs-params">FieldInfo field, ParameterExpression outputVariable,</span></span><br><span class="hljs-params"><span class="hljs-function">            List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// output.<span class="hljs-doctag">&lt;field&gt;</span> = (<span class="hljs-doctag">&lt;type&gt;</span>)null;           </span><br>            <span class="hljs-keyword">var</span> fieldTo = Expression.Field(outputVariable, field);<br>            <span class="hljs-keyword">var</span> fieldToNullExpression = Expression.Assign(fieldTo, Expression.Constant(<span class="hljs-literal">null</span>, field.FieldType));<br>            expressions.Add(fieldToNullExpression);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WritableFieldCopyExpression</span>(<span class="hljs-params">Type type, FieldInfo field, ParameterExpression inputParameter,</span></span><br><span class="hljs-params"><span class="hljs-function">            ParameterExpression inputDictionary, ParameterExpression outputVariable, List&lt;Expression&gt; expressions</span>)</span><br>        &#123;<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// Intended code:</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>//</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>// output.<span class="hljs-doctag">&lt;field&gt;</span> = (<span class="hljs-doctag">&lt;fieldType&gt;</span>)DeepCopyByExpressionTreeObj((Object)((<span class="hljs-doctag">&lt;type&gt;</span>)input).<span class="hljs-doctag">&lt;field&gt;</span>);</span><br>            <span class="hljs-keyword">var</span> fieldFrom = Expression.Field(Expression.Convert(inputParameter, type), field);<br>            <span class="hljs-keyword">var</span> fieldType = field.FieldType;<br>            <span class="hljs-keyword">var</span> fieldTo = Expression.Field(outputVariable, field);<br>            <span class="hljs-keyword">var</span> forceDeepCopy = field.FieldType != _objectType;<br>            <span class="hljs-keyword">var</span> fieldDeepCopyExpression = Expression.Assign(fieldTo,<br>                Expression.Convert(<br>                    Expression.Call(DeepCopyByExpressionTreeObjMethod, Expression.Convert(fieldFrom, _objectType),<br>                        Expression.Constant(forceDeepCopy, <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">bool</span>)), inputDictionary), fieldType));<br>            expressions.Add(fieldDeepCopyExpression);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsArray</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> type.IsArray;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsDelegate</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span>(Delegate).IsAssignableFrom(type);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsTypeToDeepCopy</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> IsClassOtherThanString(type)<br>                   || IsStructWhichNeedsDeepCopy(type);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsClassOtherThanString</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> !type.IsValueType &amp;&amp; type != <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsStructWhichNeedsDeepCopy</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 多线程访问</span><br>            <span class="hljs-keyword">if</span> (!_isStructTypeToDeepCopyDictionary.TryGetValue(type, <span class="hljs-keyword">out</span> <span class="hljs-built_in">bool</span> isStructTypeToDeepCopy))<br>            &#123;<br>                <span class="hljs-keyword">lock</span> (_isStructTypeToDeepCopyDictionaryLocker)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (!_isStructTypeToDeepCopyDictionary.TryGetValue(type, <span class="hljs-keyword">out</span> isStructTypeToDeepCopy))<br>                    &#123;<br>                        isStructTypeToDeepCopy = IsStructWhichNeedsDeepCopy_NoDictionaryUsed(type);<br><br>                        <span class="hljs-keyword">var</span> newDictionary =<br>                            _isStructTypeToDeepCopyDictionary.ToDictionary(pair =&gt; pair.Key, pair =&gt; pair.Value);<br><br>                        newDictionary[type] = isStructTypeToDeepCopy;<br><br>                        _isStructTypeToDeepCopyDictionary = newDictionary;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> isStructTypeToDeepCopy;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsStructWhichNeedsDeepCopy_NoDictionaryUsed</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> IsStructOtherThanBasicValueTypes(type) &amp;&amp; HasInItsHierarchyFieldsWithClasses(type);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsStructOtherThanBasicValueTypes</span>(<span class="hljs-params">Type type</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> type.IsValueType &amp;&amp; !type.IsPrimitive &amp;&amp; !type.IsEnum &amp;&amp; type != <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">decimal</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">HasInItsHierarchyFieldsWithClasses</span>(<span class="hljs-params">Type type, HashSet&lt;Type&gt; alreadyCheckedTypes = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            alreadyCheckedTypes = alreadyCheckedTypes ?? <span class="hljs-keyword">new</span> HashSet&lt;Type&gt;();<br>            alreadyCheckedTypes.Add(type);<br>            <span class="hljs-keyword">var</span> allFields = GetAllFields(type);<br>            <span class="hljs-keyword">var</span> allFieldTypes = allFields.Select(f =&gt; f.FieldType).Distinct().ToList();<br>            <span class="hljs-keyword">var</span> hasFieldsWithClasses = allFieldTypes.Any(IsClassOtherThanString);<br>            <span class="hljs-keyword">if</span> (hasFieldsWithClasses)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> notBasicStructsTypes = allFieldTypes.Where(IsStructOtherThanBasicValueTypes).ToList();<br>            <span class="hljs-keyword">var</span> typesToCheck = notBasicStructsTypes.Where(t =&gt; !alreadyCheckedTypes.Contains(t)).ToList();<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> typeToCheck <span class="hljs-keyword">in</span> typesToCheck)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (HasInItsHierarchyFieldsWithClasses(typeToCheck, alreadyCheckedTypes))<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ReferenceEqualityComparer</span> : <span class="hljs-title">EqualityComparer</span>&lt;<span class="hljs-title">object</span>&gt;<br>        &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Equals</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> x, <span class="hljs-built_in">object</span> y</span>)</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> ReferenceEquals(x, y);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetHashCode</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> obj.GetHashCode();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四叉树</title>
    <link href="/2024/08/30/%E5%9B%9B%E5%8F%89%E6%A0%91/"/>
    <url>/2024/08/30/%E5%9B%9B%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图形学的基本要义</title>
    <link href="/2024/08/30/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    <url>/2024/08/30/%E5%9B%BE%E5%BD%A2%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>看上去是对的，那就是对的</p>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity基础光照</title>
    <link href="/2024/08/30/%E5%9F%BA%E7%A1%80%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/08/30/%E5%9F%BA%E7%A1%80%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="光照"><a href="#光照" class="headerlink" title="光照"></a>光照</h2><h3 id="散射"><a href="#散射" class="headerlink" title="散射"></a>散射</h3><h3 id="吸收"><a href="#吸收" class="headerlink" title="吸收"></a>吸收</h3><h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><h2 id="标准光照模型"><a href="#标准光照模型" class="headerlink" title="标准光照模型"></a>标准光照模型</h2><ul><li><p>环境光</p></li><li><p>自发光</p></li><li><p>高光反射（镜面反射）</p></li><li><p>漫反射</p></li><li><p>菲涅尔效应</p></li></ul><h2 id="HLSL"><a href="#HLSL" class="headerlink" title="HLSL"></a>HLSL</h2><table><thead><tr><th>基本数据类型</th><th>描述</th><th>用途</th></tr></thead><tbody><tr><td>float</td><td>一般是32位</td><td>顶点，纹理坐标</td></tr><tr><td>half</td><td>一般是16位</td><td>矢量，方向，位置，颜色等</td></tr></tbody></table><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><ul><li>计算向量间的夹角</li></ul><p>$$<br>AB&#x3D;dot(A, B) &#x3D; |A||B|cos\theta<br>$$</p><p>$$<br>cos\theta &#x3D; \frac{AB}{|A||B|}<br>$$</p><h2 id="逐顶点和逐像素"><a href="#逐顶点和逐像素" class="headerlink" title="逐顶点和逐像素"></a>逐顶点和逐像素</h2><p>像素是根据顶点插值而来的</p><h2 id="Lambert"><a href="#Lambert" class="headerlink" title="Lambert"></a>Lambert</h2><p>是光的漫反射经验模型</p><p><strong>认为某点的漫反射强度和入射光线与其法线方向夹角成正比</strong></p><p>假设所有的向量都是标准化向量的情况下计算出对应点的漫反射强度为<br>$$<br>diffuse &#x3D; clamp01(dot(lightDir,normal))<br>$$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 兰伯特漫反射光照模型</span><br>half <span class="hljs-title function_">LambertDiffuse</span><span class="hljs-params">(float3 normal, float3 lightDir)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> saturate(dot(normal, lightDir));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Half-Lambert"><a href="#Half-Lambert" class="headerlink" title="Half Lambert"></a>Half Lambert</h2><p>当cos值为负数时，会全黑，因此有<strong>Half Lambert</strong></p><p>$$<br>diffuse &#x3D; dot(lightDir,normal)*0.5+0.5<br>$$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">half <span class="hljs-title function_">HalfLambdaDiffuse</span><span class="hljs-params">(float3 normal, float3 lightDir)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> saturate(dot(normal, lightDir) * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/URP-Lambert.png" alt="URP-Lambert"></p>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity基础光照</title>
    <link href="/2024/08/30/%E7%BA%B9%E7%90%86/"/>
    <url>/2024/08/30/%E7%BA%B9%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>_MainTex</p><p>_MainTex_ST</p><p>ST: Scale 和 Tiling</p><ul><li>计算UV</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a2v</span></span><br><span class="hljs-class">&#123;</span><br>    float4 positionOS: POSITION;<br>    half4 vertexColor: COLOR;<br>    float2 uv : TEXCOORD0;<br>&#125;;<br><br>v2f <span class="hljs-title function_">vert</span><span class="hljs-params">(a2v v)</span><br>&#123;<br>    v2f o;<br>    o.positionCS = TransformObjectToHClip(v.positionOS.xyz);<br>    o.uv = TRANSFORM_TEX(v.uv, _MainTex);<br>    o.vertexColor = v.vertexColor;<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>TRANSFORM_TEX</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRANSFORM_TEX(tex, name) ((tex.xy) * name##_ST.xy + name##_ST.zw)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Runtime Virtual Texture</title>
    <link href="/2024/08/30/RVT/"/>
    <url>/2024/08/30/RVT/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-Runtime-Virtual-Texture"><a href="#什么是-Runtime-Virtual-Texture" class="headerlink" title="什么是 Runtime Virtual Texture"></a>什么是 Runtime Virtual Texture</h2><p>Runtime Virtual Texture 是一种在运行时生成纹理的技术。它可以用来实现很多高级的效果，比如地形细节纹理、地形细节法线、地形细节高度、地形细节光照等。</p>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插值算法</title>
    <link href="/2024/08/30/%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/"/>
    <url>/2024/08/30/%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="插值算法"><a href="#插值算法" class="headerlink" title="插值算法"></a>插值算法</h1><p>插值算法用于在已知数据点之间估计未知点的值。它在计算机图形学、数据分析和信号处理等领域有广泛应用。以下是一些常见的插值方法及其公式。</p><h2 id="线性插值"><a href="#线性插值" class="headerlink" title="线性插值"></a>线性插值</h2><p>线性插值是最简单的插值方法，它通过两个已知点之间的直线来估计中间点的值。公式如下：<br>$$<br>f(x) &#x3D; f(x_0) + \frac{f(x_1) - f(x_0)}{x_1 - x_0} \cdot (x - x_0)<br>$$<br>其中，(x_0) 和 (x_1) 是已知点的横坐标，(f(x_0)) 和 (f(x_1)) 是对应的纵坐标。</p><h2 id="二次插值"><a href="#二次插值" class="headerlink" title="二次插值"></a>二次插值</h2><p>二次插值使用三个已知点来构建一个二次多项式。公式如下：<br>$$<br>f(x) &#x3D; a(x - x_0)(x - x_1) + b(x - x_0) + c<br>$$<br>其中，(a)、(b)、(c) 是通过已知点计算得到的系数。</p><h2 id="三次插值"><a href="#三次插值" class="headerlink" title="三次插值"></a>三次插值</h2><p>三次插值使用四个已知点来构建一个三次多项式。公式如下：<br>$$<br>f(x) &#x3D; a(x - x_0)(x - x_1)(x - x_2) + b(x - x_0)(x - x_1) + c(x - x_0) + d<br>$$<br>其中，(a)、(b)、(c)、(d) 是通过已知点计算得到的系数。</p><h2 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h2><p>拉格朗日插值是一种多项式插值方法，它通过已知点的函数值来构建一个多项式。公式如下：<br>$$<br>f(x) &#x3D; \sum_{i&#x3D;0}^{n} f(x_i) \cdot L_i(x)<br>$$<br>其中，(L_i(x)) 是拉格朗日基函数，定义为：<br>$$<br>L_i(x) &#x3D; \prod_{j&#x3D;0, j \neq i}^{n} \frac{x - x_j}{x_i - x_j}<br>$$</p><h2 id="牛顿插值"><a href="#牛顿插值" class="headerlink" title="牛顿插值"></a>牛顿插值</h2><p>牛顿插值使用差商表来构建插值多项式。公式如下：<br>$$<br>f(x) &#x3D; f(x_0) + (x - x_0) \cdot f[x_0, x_1] + (x - x_0)(x - x_1) \cdot f[x_0, x_1, x_2] + \ldots<br>$$<br>其中，(f[x_0, x_1]) 是 (x_0) 和 (x_1) 的差商，依此类推。</p><h2 id="分段线性插值"><a href="#分段线性插值" class="headerlink" title="分段线性插值"></a>分段线性插值</h2><p>分段线性插值将数据分成多个区间，在每个区间内使用线性插值。对于每个区间 ([x_i, x_{i+1}])，插值公式为：<br>$$<br>f(x) &#x3D; f(x_i) + \frac{f(x_{i+1}) - f(x_i)}{x_{i+1} - x_i} \cdot (x - x_i)<br>$$</p><h2 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h2><p>双线性插值用于二维数据，通过在两个方向上进行线性插值来估计中间点的值。假设已知四个点 ((x_0, y_0))、((x_1, y_0))、((x_0, y_1))、((x_1, y_1))，公式如下：<br>$$<br>f(x, y) &#x3D; f(x_0, y_0) \cdot (1 - \frac{x - x_0}{x_1 - x_0}) \cdot (1 - \frac{y - y_0}{y_1 - y_0}) + f(x_1, y_0) \cdot \frac{x - x_0}{x_1 - x_0} \cdot (1 - \frac{y - y_0}{y_1 - y_0}) + f(x_0, y_1) \cdot (1 - \frac{x - x_0}{x_1 - x_0}) \cdot \frac{y - y_0}{y_1 - y_0} + f(x_1, y_1) \cdot \frac{x - x_0}{x_1 - x_0} \cdot \frac{y - y_0}{y_1 - y_0}<br>$$</p><h2 id="三次样条插值"><a href="#三次样条插值" class="headerlink" title="三次样条插值"></a>三次样条插值</h2><p>三次样条插值使用分段的三次多项式来平滑地连接多个点。每个区间 ([x_i, x_{i+1}]) 的插值公式为：<br>$$<br>f(x) &#x3D; a_i(x - x_i)^3 + b_i(x - x_i)^2 + c_i(x - x_i) + d_i<br>$$<br>其中，(a_i)、(b_i)、(c_i)、(d_i) 是通过已知点和边界条件计算得到的系数。</p><h2 id="贝塞尔插值"><a href="#贝塞尔插值" class="headerlink" title="贝塞尔插值"></a>贝塞尔插值</h2><p>贝塞尔插值使用控制点来定义曲线。对于二次贝塞尔曲线，公式如下：<br>$$<br>B(t) &#x3D; (1 - t)^2 P_0 + 2(1 - t)t P_1 + t^2 P_2<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UIFramework</title>
    <link href="/2024/08/30/UIFramework/"/>
    <url>/2024/08/30/UIFramework/</url>
    
    <content type="html"><![CDATA[<h1 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h1><h2 id="UIFramework"><a href="#UIFramework" class="headerlink" title="UIFramework"></a>UIFramework</h2><ul><li>首先在场景中创建一个UIRoot对象，用于管理UI面板</li><li>创建后会自动生成一个UIDatabase对象，存放在Assets目录下，可以根据自己的需要进行移动</li><li>可以尝试双击打开UIDatabase(未实现的功能)</li><li>首先实现一个自定的UI资源加载器(下面分别时基于Addressabels和Resouces的两种IUILoader实现)<ul><li>三种加载方式分别对应同步加载 ，回调加载 ，Task加载</li><li>本质上是加载一个UI面板的Prefab</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">struct</span> AddressablesUILoader : IUILoader<br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">Load</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : IUIPanel</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> path = <span class="hljs-string">$&quot;UI/<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>.prefab&quot;</span>;<br>        <span class="hljs-keyword">return</span> Addressables.LoadAssetAsync&lt;GameObject&gt;(path).WaitForCompletion();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">Action&lt;GameObject&gt; callback</span>) <span class="hljs-keyword">where</span> T : IUIPanel</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> path = <span class="hljs-string">$&quot;UI/<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>.prefab&quot;</span>;<br>        <span class="hljs-keyword">var</span> handle = Addressables.LoadAssetAsync&lt;GameObject&gt;(path);<br>        handle.Completed += operation =&gt; &#123; callback(handle.Result); &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title">Task</span>&lt;<span class="hljs-title">GameObject</span>&gt; <span class="hljs-title">LoadAsync</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : IUIPanel</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> path = <span class="hljs-string">$&quot;UI/<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>.prefab&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> Addressables.LoadAssetAsync&lt;GameObject&gt;(path);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params">GameObject panel</span>)</span><br>    &#123;<br>        Addressables.Release(panel);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> <span class="hljs-keyword">struct</span> DefaultLoader : IUILoader<br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">Load</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : IUIPanel</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Resources.Load&lt;GameObject&gt;(<span class="hljs-keyword">typeof</span>(T).Name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadAsync</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">Action&lt;GameObject&gt; callback</span>) <span class="hljs-keyword">where</span> T : IUIPanel</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> handle = Resources.LoadAsync&lt;GameObject&gt;(<span class="hljs-keyword">typeof</span>(T).Name);<br>        handle.completed += operation =&gt; &#123; callback(handle.asset <span class="hljs-keyword">as</span> GameObject); &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title">Task</span>&lt;<span class="hljs-title">GameObject</span>&gt; <span class="hljs-title">LoadAsync</span>&lt;<span class="hljs-title">T</span>&gt;() <span class="hljs-keyword">where</span> T : IUIPanel</span><br>    &#123;<br>        TaskCompletionSource&lt;GameObject&gt; tcs = <span class="hljs-keyword">new</span> TaskCompletionSource&lt;GameObject&gt;();<br>        <span class="hljs-keyword">var</span> handle = Resources.LoadAsync&lt;GameObject&gt;(<span class="hljs-keyword">typeof</span>(T).Name);<br>        tcs.SetResult(handle.asset <span class="hljs-keyword">as</span> GameObject);<br>        <span class="hljs-keyword">await</span> tcs.Task;<br>        <span class="hljs-keyword">return</span> tcs.Task.Result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params">GameObject panel</span>)</span><br>    &#123;<br>        DestroyImmediate(panel);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>然后在代码中初始化UI加载器</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">UIRoot.Singleton.UIDatabase.Loader = <span class="hljs-keyword">new</span> AddressablesUILoader();<br></code></pre></td></tr></table></figure><ul><li>然后可以按照需要进行UI的加载和销毁</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">UIRoot.Singleton.OpenPanel&lt;TXXXPanel&gt;(); <span class="hljs-comment">// 打开一个面板</span><br>UIRoot.Singleton.ClosePanel&lt;TXXXPanel&gt;(); <span class="hljs-comment">// 关闭一个面板</span><br>UIRoot.Singleton.CloseAllPanel(); <span class="hljs-comment">// 关闭所有面板</span><br>UIRoot.Singleton.Dispose&lt;TXXXPanel&gt;(); <span class="hljs-comment">// 销毁一个面板</span><br></code></pre></td></tr></table></figure><ul><li>如何制作一个UIPanel<ul><li>在UIRoot的Canvas下创建一个Canvas，修改名字，然后拖到Project下，生成一个Prefab</li><li>创建一个脚本继承UIPanel，将UIPanel挂载到prefab上</li><li>也可以实现IUIPanel接口，实现自己的UIPanel</li><li>注意你的prefab路径，需要能够被你的IUILoader加载到</li></ul></li></ul><h3 id="无限循环滚动列表"><a href="#无限循环滚动列表" class="headerlink" title="无限循环滚动列表"></a>无限循环滚动列表</h3><p>LoopScrollRect: 无限循环滚动列表 ，来自github.com&#x2F;qiankanglai&#x2F;LoopScrollRect</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>UGUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Shader</title>
    <link href="/2024/06/17/Unity%20Shader%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/06/17/Unity%20Shader%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h2><ul><li><strong>渲染管线(Rendering Pipeline)：</strong> 一提到管线，感觉很高大上的样子。说的俗一点就是可以理解为流水线。渲染管线我们可暂时理解为 <strong>从得到模型数据到绘制出图像</strong> 这一过程的称呼。</li><li><strong>Vertex Shader：</strong> 对顶点数据编程的一段程序。 人类有懒惰的天性，习惯用简化的词汇来表达同一个东西。对 Vertex Shader 也不例外，一般称其为 VS ，但是在本系列文章中会保持全称。</li><li><strong>Fragment Shader：</strong> 对像素数据编程的一段程序。这里 fragment 可以理解为带有信息（颜色，坐标等）的像素 (Pixel), 一般也简称其为 FS 或者 PS 。 在本系列文章中会保持其全称。</li><li><strong>FrameBuffer：</strong> 缓存帧数据的存储区，它一般包含的是要显示到显示设备上的位图数据（也就是图片数据）。</li><li><strong>Fixed Function：</strong> 由于一些硬件支持等历史原因，早期的图形 API <strong>只支持对 GPU 做配置</strong>，这部分只可配置的功能就是 fixed fucntion。这里注意下，fixed function 的功能只能配置，不像 Vertex Shader　和 fragment Shader 可以编程（写自己的算法）。</li></ul><p><img src="https://wudixiaop.github.io/images/Shader/2/rendering-pipeline.jpg" alt="2.renderingpipeline.jpg"></p><h2 id="Shader语言"><a href="#Shader语言" class="headerlink" title="Shader语言"></a>Shader语言</h2><p><a href="https://docs.unity3d.com/Manual/SL-Reference.html">Unity - Manual: ShaderLab (unity3d.com)</a></p><ul><li><strong>CG</strong> ： C For Graphics，是一种专门为图形编程设计的语言，它是一种高级语言，可以编译成汇编语言，也可以编译成高级语言。</li><li><strong>HLSL</strong> ： High Level Shader Language，是微软公司为DirectX开发的一种高级着色器语言。</li><li><strong>GLSL</strong> ： OpenGL Shading Language，是OpenGL的着色器语言。</li></ul><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><ul><li>物体坐标系 <strong>ObjectSpace</strong></li><li>世界坐标系 <strong>WorldSpace</strong></li><li>视口坐标系 <strong>ViewportSpace</strong></li><li>屏幕坐标系 <strong>ScreenSpace</strong></li></ul><p>左手和右手坐标系</p><h3 id="MeshRender是如何渲染的"><a href="#MeshRender是如何渲染的" class="headerlink" title="MeshRender是如何渲染的"></a>MeshRender是如何渲染的</h3><p><a href="https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html">Unity - Manual: Built-in shader variables (unity3d.com)</a></p><p>以立方体为例，Mesh Renderer 组件得到模型数据之后它会执行 vertex shader。vertex shader 里面做了下面这些事：</p><ol><li>先把立方体从模型的物体坐标系转换成世界坐标系，<strong>从 物体 到 世界</strong>。这样子，它和摄像机（世界坐标）的位置就用同一个坐标系描述了。</li><li>再把立方体从世界坐标转换成视口坐标系，也就是摄像机因为原点的坐标系，<strong>从 世界 到 视口</strong>。这样它是在摄像机的正面，还是在反面了。</li><li>最后在投射到屏幕坐标系上， <strong>从 视口 到 屏幕</strong>。这样知道哪些区域需要绘制在屏幕上，哪些不需要。</li></ol><p>总结上面一系列变换关系就是： <strong>物体 到 世界 再到 视口 再到 屏幕</strong>。中间经过了三次变换 (transform)。这些变换在数学上通过 <strong>矩阵</strong> 来描述的。</p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p><a href="https://zhuanlan.zhihu.com/p/94081709">Photoshop图层混合模式详解 - 知乎 (zhihu.com)</a></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="平台差异"><a href="#平台差异" class="headerlink" title="平台差异"></a>平台差异</h3><ul><li>DX 和 Open GL 存在屏幕空间坐标差异。 DX中的屏幕坐标系原点在屏幕的左上角，而OpenGL中的屏幕坐标系原点在屏幕的左下角。</li></ul><h3 id="慎用分支语句"><a href="#慎用分支语句" class="headerlink" title="慎用分支语句"></a>慎用分支语句</h3><ul><li>if else 语句会导致分支预测，分支预测会导致性能下降 </li><li>if else 中使用的变量最好是常量 在编译时就能确定分支的走向</li><li>分支中的操作尽量简单，不要有复杂的计算</li><li>嵌套的分支语句会导致性能下降</li></ul><h3 id="不要除以0"><a href="#不要除以0" class="headerlink" title="不要除以0"></a>不要除以0</h3><ul><li>除以0不会报错</li></ul><h2 id="Shaderlab"><a href="#Shaderlab" class="headerlink" title="Shaderlab"></a>Shaderlab</h2><ul><li>Shader最精简的骨架</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">Shader &quot;XXXXName&quot; &#123;<br><br>    Subshader &#123;<br><br>        Pass &#123; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通用的Shader模版，包含注释</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">Shader &quot;#NAME#&quot;<br>&#123;<br>    /* Properties区域<br>     * <br>     * Shaderlab 提供的一种用于在Inspector中显示Shader属性的机制<br>     * 通过Properties区域定义的属性，可以在Inspector中显示，并且可以在Shader中使用<br>     * 支持的类型查看Unity文档 https://docs.unity3d.com/Manual/SL-Properties.html<br>     * <br>     * 如何定义<br>     * 属性名(&quot;Inspector显示名&quot;, 类型) = &quot;默认值&quot; &#123; &#125;<br>     * <br>     * 如何与HLSL关联 <br>     * 需要在HLSL中声明一个同名的变量，这样Unity会自动将Inspector中的属性值赋值给HLSL中的变量<br>     */<br><br>    Properties<br>    &#123;<br>        _BaseMap (&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;// 主贴图<br>    &#125;<br>    /* SubShader是Shader的主要部分，包含了一系列的Pass<br>     * Pass是渲染管线的一个阶段，包含了一个顶点着色器和一个片元着色器<br>     * 可能存在多个SubShader，Unity会选择当前环境可用的第一个SubShader<br>     */<br>    SubShader<br>    &#123;<br>        /* Tag 是一个键值对，它的作用是告诉渲染引擎，应该 什么时候 怎么样 去渲染 <br>         * https://docs.unity.cn/cn/2022.3/Manual/SL-SubShaderTags.html<br>         */<br>        Tags<br>        &#123;<br>            &quot;RenderType&quot;=&quot;Opaque&quot;<br>            &quot;RenderPipeLine&quot;=&quot;UniversalRenderPipeline&quot; //用于指明使用URP来渲染<br>        &#125;<br>        /* 通用区域 这里内容可以在多个Pass中共享 */<br><br>        HLSLINCLUDE<br>        #include &quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl&quot;<br>        #include &quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl&quot;<br>        #include &quot;Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl&quot;<br>        #include &quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl&quot;<br><br><br>        // 支持SRP Batcher<br>        CBUFFER_START(UnityPerMaterial)<br>            //声明变量<br>            float4 _BaseMap_ST;<br>        CBUFFER_END<br><br>        TEXTURE2D(_BaseMap); //贴图采样  <br>        SAMPLER(sampler_BaseMap);<br><br>        /* 渲染管线整个流水线都有数据的输入和输出<br>         * 这些数据是什么? 从哪里输入? 输出到哪里? Shader中的变量如何与这些数据交互?<br>         */<br><br>        /* 常用种类<br>         * POSITION: 顶点位置<br>         * NORMAL: 顶点法线<br>         * TANENT: 顶点切线<br>         * COLOR: 顶点颜色<br>         * TXECOORD0: 纹理坐标 UV0 -(UV是一张图 可以有多个通道 UV0表示第一个通道)<br>         * TEXCOORD1: 纹理坐标 UV1<br>         * TEXCOORD2: 纹理坐标 UV2<br>         * TEXCOORD3: 纹理坐标 UV3<br>         *<br>         *<br>         * 输入输出<br>         * 数据存放在寄存器中，输入从寄存器中读取，输出写入寄存器<br>         *<br>         *<br>         * Shader中的变量如何与这些数据交互<br>         * 语义绑定<br>         * void xxFunc(xxxType xxName : XXX) -(作函数参数标记)<br>         * xxxType xxFunc() : XXX -(作函数返回值标记)<br>         * struct xxStruct&#123; <br>         *   xxxType xxName : XXX; -(作结构体成员标记)<br>         * &#125;<br>         * 输入输出怎么表示<br>         * in -&gt; 输入<br>         * out -&gt; 输出<br>         * inout -&gt; 输入输出<br>         */<br><br>        // a2v -&gt; attribute to vertex<br>        struct a2v //顶点着色器<br>        &#123;<br>            float4 positionOS: POSITION;<br>            float3 normalOS: TANGENT;<br>            half4 vertexColor: COLOR;<br>            float2 uv : TEXCOORD0;<br>        &#125;;<br><br>        // v2f -&gt; vertex to fragment<br>        struct v2f //片元着色器<br>        &#123;<br>            float4 positionCS: SV_POSITION;<br>            float2 uv: TEXCOORD0;<br>            half4 vertexColor: COLOR;<br>        &#125;;<br>        ENDHLSL<br><br>        Pass<br>        &#123;<br>            // Pass的标签<br>            Tags &#123;&#125;<br>            HLSLPROGRAM<br><br>            // 编译指令 <br>            #pragma vertex vert // vertex shader 的函数 是 vert<br>            #pragma fragment frag // fragment shader 的函数 是 frag<br><br><br>            v2f vert(a2v v)<br>            &#123;<br>                v2f o;<br>                o.positionCS = TransformObjectToHClip(v.positionOS.xyz);<br>                o.uv = TRANSFORM_TEX(v.uv, _BaseMap);<br>                o.vertexColor = v.vertexColor;<br>                return o;<br>            &#125;<br><br>            half4 frag(v2f i) : SV_Target /* 注意在HLSL中，fixed4类型变成了half4类型*/<br>            &#123;<br>                half4 col = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, i.uv);<br>                half res = lerp(i.vertexColor, col, i.vertexColor.g).x;<br>                return half4(res, res, res, 1.0);<br>            &#125;<br>            ENDHLSL<br>        &#125;<br>    &#125;<br><br>    /* Fallback是一个备用Shader，当当前Shader不支持时，会使用Fallback指定的Shader<br>     * 通常是Unity内置的Shader<br>     */<br>    Fallback &quot;Universal Render Pipeline/Unlit&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="谁先被渲染"><a href="#谁先被渲染" class="headerlink" title="谁先被渲染"></a>谁先被渲染</h2><p>Subshader中的Tags选项用于告诉渲染引擎，什么时候，怎么样去渲染。</p><p>支持的Tag可以查阅Unity文档：<a href="https://docs.unity.cn/cn/2022.3/Manual/SL-SubShaderTags.html">ShaderLab：向子着色器分配标签 - Unity 手册</a></p><p>其中Queue是决定对象渲染顺序的标签，越小越先渲染，但是不能填数值，预先定义了5个词代替数值</p><ul><li><strong>Background：</strong> 对应数值为 1000，用于需要被最先渲染的对象，如背景什么的。</li><li><strong>Geometry：</strong> 对应数值为 2000, 用于不透明的物体。这个是默认的选项（如果不指明 Queue 标签的值，自动给你指定为 Geometry）。</li><li><strong>AlphaTest：</strong> 对应的数值为 2450, 用于需要使用 AlphaTest 的对象来提高性能。AlphaTest 类似于裁剪 (clip) 功能。</li><li><strong>Transparent：</strong> 对应的数值为 3000， 用于需要使用 alpha blending 的对象，比如粒子，玻璃等。</li><li><strong>Overlay：</strong> 对应的数值为 4000，用于最后被渲染的对象，比如 UI。</li></ul><p>虽然不能直接填数值，但是支持<strong>加减法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">Shader &quot;XXXName&quot; &#123;<br><br>    SubShader &#123;<br>        Tags &#123; &quot;Queue&quot; = &quot;Transparent&quot; &#125;<br><br>        Pass &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Pargama指令"><a href="#Pargama指令" class="headerlink" title="Pargama指令"></a>Pargama指令</h2><p>用于告诉shaderlab编译器，应该这样这样，那样那样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">Shader &quot;XXXName&quot; &#123;<br><br>    Subshader &#123;<br><br>        pass &#123;<br>            // CGPROGRAM ... ENDCG 在 Pass 里面<br>            HLSLPROGRAM<br><br>            // vertex shader 的函数是 vert<br>            #pragma vertex vert<br><br>            // fragment shader 的函数是 fragment<br>            #pragma fragment frag<br><br>            void vert() &#123;<br><br>            &#125;<br><br>            void frag () &#123;<br><br>            &#125;<br><br>            ENDHLSL<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Property区域"><a href="#Property区域" class="headerlink" title="Property区域"></a>Property区域</h2><p>Shaderlab 提供的一种用于在Inspector中显示Shader属性的机制，通过Properties区域定义的属性，可以在Inspector中显示，并且可以在Sub Shader中使用。</p><ul><li><em>属性名(“Inspector显示名”, 类型) &#x3D; “默认值” { }</em></li></ul><p>支持的类型 <a href="https://docs.unity3d.com/Manual/SL-Properties.html">https://docs.unity3d.com/Manual/SL-Properties.html</a></p><p>需要在HLSL中声明一个同名的变量，这样Unity会自动将Inspector中的属性值赋值给HLSL中的变量</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Shader</span> <span class="hljs-string">&quot;#NAME#&quot;</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Properties</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-type">_BaseMap</span> <span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Texture&quot;</span><span class="hljs-operator">,</span> <span class="hljs-number">2</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;white&quot;</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">//</span> 主贴图<br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-variable">SubShader</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-variable">Pass</span><br>        <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="语义绑定"><a href="#语义绑定" class="headerlink" title="语义绑定"></a>语义绑定</h2><p>渲染管线整个流水线都有数据的输入和输出，这些数据是什么? 从哪里输入? 输出到哪里? Shader中的变量如何与这些数据交互?</p><p><strong>常用种类?</strong></p><ul><li>POSITION: 顶点位置</li><li>NORMAL: 顶点法线</li><li>TANENT: 顶点切线</li><li>COLOR: 顶点颜色</li><li>TXECOORD0: 纹理坐标 UV0</li><li>TEXCOORD1: 纹理坐标 UV1</li><li>TEXCOORD2: 纹理坐标 UV2</li><li>TEXCOORD3: 纹理坐标 UV3</li></ul><p> <strong>输入输出?</strong></p><p> 数据存放在寄存器中，输入从寄存器中读取，输出写入寄存器</p><p> <strong>Shader中的变量如何与这些数据交互?</strong><br>语义绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">void xxFunc(xxxType xxName : XXX) -(作函数参数标记)<br>  xxxType xxFunc() : XXX -(作函数返回值标记)<br>  struct xxStruct&#123; <br>   xxxType xxName : XXX; -(作结构体成员标记)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输入输出怎么表示</strong></p><ul><li>in -&gt; 输入</li><li>out -&gt; 输出</li><li>inout -&gt; 输入输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">Shader &quot;Custom/Shader10&quot; &#123;<br>    SubShader &#123;<br>        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;<br><br>        pass &#123;<br><br>            CGPROGRAM<br><br>            #pragma vertex vert<br>            #pragma fragment frag<br><br>            // 结构体中使用语义绑定<br>            struct VertexOutput &#123;<br>                float4 pos :SV_POSITION;   // 转换到投射空间后位置<br>                float4 texcoord :TEXCOORD0;// 顶点颜色<br>            &#125;;<br><br><br>            VertexOutput vert(in float4 pos :POSITION /*参数中使用语义绑定*/)<br>            &#123;<br>                VertexOutput output;<br>                output.pos = mul(UNITY_MATRIX_MVP, pos);<br>                output.texcoord = pos + float4(0.5, 0.5, 0.5, 0);<br>                return output;<br>                &#125;<br><br>            float4 frag(VertexOutput input) :COLOR // 函数后面使用语义绑定<br>            &#123;<br>                return input.texcoord;<br>            &#125;<br><br>            ENDCG<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="深度缓存"><a href="#深度缓存" class="headerlink" title="深度缓存"></a>深度缓存</h2><p><a href="https://docs.unity3d.com/Manual/shader-shaderlab-commands.html">Unity - Manual: ShaderLab: commands (unity3d.com)</a></p><p>FrameBuffer时用于存储帧位图的数据存储区域。深度缓存（Depth Buffer）也叫 Z-Buffer，这是用于存储深度数据的存储区。</p><ul><li>存储的深度数据是什么？</li><li>有什么用？</li></ul><p><strong>深度是什么？</strong></p><p>描述物体的位置，需要有参考系。深度值的参考系是观察者的视角 - 相机视角。在Vertex Shader之后有一个插值过程，用于生成像素，像素的XY坐标为屏幕坐标，Z坐标就是深度值，存储在深度缓存里面。</p><p><strong>有什么用？</strong></p><p>如果两个物体渲染后的像素的屏幕坐标XY相同，那么应该渲染谁？谁离更近就先渲染谁。</p><p>在Shaderlab中用 <strong>ZTest</strong>表示，有以下预设值，默认值是 LEqual ，意思是 渲染小于等于的那一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">ZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always<br></code></pre></td></tr></table></figure><p>如果两个像素的Z也相同呢？深度值一样的情况也叫做 <strong>深度冲突</strong> (Z-fighting)。解决方法是给其中某一个物体设置偏移量。 Shaderlab 中语法是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">Offset Factor, Units<br></code></pre></td></tr></table></figure><p>Offset 根据一个插值公式来计算出新的深度值 <a href="https://learn.microsoft.com/zh-cn/windows/win32/opengl/glpolygonoffset?redirectedfrom=MSDN">glPolygonOffset 函数 (Gl.h) - Win32 apps | Microsoft Learn</a></p><p>也可以手动打开和关闭深度写入功能，在 Shaderlab 中用 ZWrite 来控制，它的语法是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HLSL">ZWrite On | Off<br></code></pre></td></tr></table></figure><p><strong>在Unity渲染中的位置</strong></p><p>在顶点着色器之后，片元着色器之前</p><p><img src="https://wudixiaop.github.io/images/Shader/11/PipelineCullDepth.png" alt="PipelineCullDepth"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>图形学</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从BuildIn到URP</title>
    <link href="/2024/06/17/%E4%BB%8EBuildIn%E5%88%B0URP/"/>
    <url>/2024/06/17/%E4%BB%8EBuildIn%E5%88%B0URP/</url>
    
    <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>首先要在SubShader的Tags中添加”RenderPipeline” &#x3D; “UniversalPipeline”，并且使用HLSL的宏代替旧版的CG语言宏。</p><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">CGPROGRAM &#x2F; HLSLPROGRAM</td><td align="left">HLSLPROGRAM</td></tr><tr><td align="left">ENDCG &#x2F; ENDHLSL</td><td align="left">ENDHLSL</td></tr><tr><td align="left">CGINCLUDE &#x2F; HLSLINCLUDE</td><td align="left">HLSLINCLUDE</td></tr></tbody></table><h2 id="Include文件的改动"><a href="#Include文件的改动" class="headerlink" title="Include文件的改动"></a>Include文件的改动</h2><table><thead><tr><th align="left">Content</th><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">Core</td><td align="left">Unity.cginc</td><td align="left">Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Core.hlsl</td></tr><tr><td align="left">Light</td><td align="left">AutoLight.cginc</td><td align="left">Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl</td></tr><tr><td align="left">Shadows</td><td align="left">AutoLight.cginc</td><td align="left">Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Shadows.hlsl</td></tr><tr><td align="left">Surface shaders</td><td align="left">Lighting.cginc</td><td align="left">无</td></tr></tbody></table><p>其他常用的include文件:</p><ul><li>Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;SpaceTransforms.hlsl</li><li>Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;ShaderVariablesFunctions.hlsl</li><li>Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Common.hlsl</li><li>Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Input.hlsl</li><li>Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Color.hlsl</li><li>Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;DeclareDepthTexture.hlsl</li><li>Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;DeclareOpaqueTextue.hlsl</li></ul><h2 id="光照模式"><a href="#光照模式" class="headerlink" title="光照模式"></a>光照模式</h2><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">ForwardBase</td><td align="left">UniversalForward</td></tr><tr><td align="left">ForwardAdd</td><td align="left">无</td></tr><tr><td align="left">Deferred and related</td><td align="left">UniversalGBuffer seems to have just been added to URP</td></tr><tr><td align="left">Vertex and related</td><td align="left">无</td></tr><tr><td align="left">ShadowCaster</td><td align="left">ShadowCaster</td></tr><tr><td align="left">MotionVectors</td><td align="left">暂不支持</td></tr></tbody></table><p>URP其他支持的光照模式：</p><ul><li>DepthOnly</li><li>Meta (用于烘焙光照贴图)</li><li>Universal2D</li></ul><h2 id="变体-Variants"><a href="#变体-Variants" class="headerlink" title="变体(Variants)"></a>变体(Variants)</h2><p>URP支持着色器的变体，可以使用#pragma multi_compile宏实现编译不同需求下的着色器，常见的内置关键字有：</p><ul><li>_MAIN_LIGHT_SHADOWS</li><li>_MAIN_LIGHT_SHADOWS_CASCADE</li><li>_ADDITIONAL_LIGHTS_VERTEX</li><li>_ADDITIONAL_LIGHTS</li><li>_ADDITIONAL_LIGHT_SHADOWS</li><li>_SHADOWS_SOFT</li><li>_MIXED_LIGHTING_SUBTRACTIVE</li></ul><h2 id="预定义的着色器预处理宏"><a href="#预定义的着色器预处理宏" class="headerlink" title="预定义的着色器预处理宏"></a>预定义的着色器预处理宏</h2><h3 id="辅助宏-Helpers"><a href="#辅助宏-Helpers" class="headerlink" title="辅助宏(Helpers)"></a>辅助宏(Helpers)</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">UNITY_PROJ_COORD(a)</td><td align="left">无，使用 a.xy&#x2F;a.w 来代替</td></tr><tr><td align="left">UNITY_INITIALIZE_OUTPUT(type, name)</td><td align="left">ZERO_INITIALIZE(type, name)</td></tr></tbody></table><h3 id="阴影贴图"><a href="#阴影贴图" class="headerlink" title="阴影贴图"></a>阴影贴图</h3><p>需要包含 Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Shadows.hlsl</p><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">UNITY_DECLARE_SHADOWMAP(tex)</td><td align="left">TEXTURE2D_SHADOW_PARAM(textureName, samplerName)</td></tr><tr><td align="left">UNITY_SAMPLE_SHADOW(tex, uv)</td><td align="left">SAMPLE_TEXTURE2D_SHADOW(textureName, samplerName, coord3)</td></tr><tr><td align="left">UNITY_SAMPLE_SHADOW_PROJ(tex, uv)</td><td align="left">SAMPLE_TEXTURE2D_SHADOW(textureName, samplerName, coord4.xyz&#x2F;coord4.w)</td></tr></tbody></table><h3 id="纹理-采样器的声明宏"><a href="#纹理-采样器的声明宏" class="headerlink" title="纹理&#x2F;采样器的声明宏"></a>纹理&#x2F;采样器的声明宏</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">UNITY_DECLARE_TEX2D(name)</td><td align="left">TEXTURE2D(textureName); SAMPLER(samplerName);</td></tr><tr><td align="left">UNITY_DECLARE_TEX2D_NOSAMPLER(name)</td><td align="left">TEXTURE2D(textureName);</td></tr><tr><td align="left">UNITY_DECLARE_TEX2DARRAY(name)</td><td align="left">TEXTURE2D_ARRAY(textureName); SAMPLER(samplerName);</td></tr><tr><td align="left">UNITY_SAMPLE_TEX2D(name, uv)</td><td align="left">SAMPLE_TEXTURE2D(textureName, samplerName, coord2)</td></tr><tr><td align="left">UNITY_SAMPLE_TEX2D_SAMPLER(name, samplername, uv)</td><td align="left">SAMPLE_TEXTURE2D(textureName, samplerName, coord2)</td></tr><tr><td align="left">UNITY_SAMPLE_TEX2DARRAY(name, uv)</td><td align="left">SAMPLE_TEXTURE2D_ARRAY(textureName, samplerName, coord2, index)</td></tr><tr><td align="left">UNITY_SAMPLE_TEX2DARRAY_LOD(name, uv, lod)</td><td align="left">SAMPLE_TEXTURE2D_ARRAY_LOD(textureName, samplerName, coord2, index, lod)</td></tr></tbody></table><h2 id="内置的着色器辅助函数"><a href="#内置的着色器辅助函数" class="headerlink" title="内置的着色器辅助函数"></a>内置的着色器辅助函数</h2><p>可以在 Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;SpaceTransforms.hlsl 看到下方的所有函数</p><h3 id="顶点变换函数"><a href="#顶点变换函数" class="headerlink" title="顶点变换函数"></a>顶点变换函数</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">float4 UnityObjectToClipPos(float3 pos)</td><td align="left">float4 TransformObjectToHClip(float3 positionOS)</td></tr><tr><td align="left">float3 UnityObjectToViewPos(float3 pos)</td><td align="left">TransformWorldToView(TransformObjectToWorld(positionOS))</td></tr></tbody></table><h3 id="泛用的辅助函数"><a href="#泛用的辅助函数" class="headerlink" title="泛用的辅助函数"></a>泛用的辅助函数</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">float3 WorldSpaceViewDir (float4 v)</td><td align="left">float3 GetWorldSpaceViewDir(float3 positionWS)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;ShaderVariablesFunctions.hlsl”</td></tr><tr><td align="left">float3 ObjSpaceViewDir (float4 v)</td><td align="left">无，使用 TransformWorldToObject(GetCameraPositionWS()) - objectSpacePosition;</td><td align="left"></td></tr><tr><td align="left">float2 ParallaxOffset (half h, half height, half3 viewDir)</td><td align="left">可能没有，从 UnityCG.cginc 复制</td><td align="left"></td></tr><tr><td align="left">fixed Luminance (fixed3 c)</td><td align="left">real Luminance(real3 linearRgb)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Color.hlsl”</td></tr><tr><td align="left">fixed3 DecodeLightmap (fixed4 color)</td><td align="left">real3 DecodeLightmap(real4 encodedIlluminance, real4 decodeInstructions)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;EntityLighting.hlsl” URP中decodeInstructions 为 half4(LIGHTMAP_HDR_MULTIPLIER, LIGHTMAP_HDR_EXPONENT, 0.0h, 0.0h)</td></tr><tr><td align="left">float4 EncodeFloatRGBA (float v)</td><td align="left">可能没有， 从 UnityCG.cginc 复制</td><td align="left"></td></tr><tr><td align="left">float DecodeFloatRGBA (float4 enc)</td><td align="left">可能没有， 从 UnityCG.cginc 复制</td><td align="left"></td></tr><tr><td align="left">float2 EncodeFloatRG (float v)</td><td align="left">可能没有， 从 UnityCG.cginc 复制</td><td align="left"></td></tr><tr><td align="left">float DecodeFloatRG (float2 enc)</td><td align="left">可能没有， 从 UnityCG.cginc 复制</td><td align="left"></td></tr><tr><td align="left">float2 EncodeViewNormalStereo (float3 n)</td><td align="left">可能没有， 从 UnityCG.cginc 复制</td><td align="left"></td></tr><tr><td align="left">float3 DecodeViewNormalStereo (float4 enc4)</td><td align="left">可能没有， 从 UnityCG.cginc 复制</td><td align="left"></td></tr></tbody></table><h3 id="前向渲染辅助函数"><a href="#前向渲染辅助函数" class="headerlink" title="前向渲染辅助函数"></a>前向渲染辅助函数</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">float3 WorldSpaceLightDir (float4 v)</td><td align="left">_MainLightPosition.xyz - TransformObjectToWorld(objectSpacePosition)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Input.hlsl”</td></tr><tr><td align="left">float3 ObjSpaceLightDir (float4 v)</td><td align="left">TransformWorldToObject(_MainLightPosition.xyz) - objectSpacePosition</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Input.hlsl”</td></tr><tr><td align="left">float3 Shade4PointLights (…)</td><td align="left">无，可尝试用half3 VertexLighting(float3 positionWS, half3 normalWS)</td><td align="left">include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl”</td></tr></tbody></table><h3 id="屏幕空间辅助函数"><a href="#屏幕空间辅助函数" class="headerlink" title="屏幕空间辅助函数"></a>屏幕空间辅助函数</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">float4 ComputeScreenPos (float4 clipPos)</td><td align="left">float4 ComputeScreenPos(float4 positionCS)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;ShaderVariablesFunctions.hlsl”</td></tr><tr><td align="left">float4 ComputeGrabScreenPos (float4 clipPos)</td><td align="left">无</td><td align="left"></td></tr></tbody></table><h3 id="顶点光照的辅助函数"><a href="#顶点光照的辅助函数" class="headerlink" title="顶点光照的辅助函数"></a>顶点光照的辅助函数</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">float3 ShadeVertexLights (float4 vertex, float3 normal)</td><td align="left">无，可尝试用 UNITY_LIGHTMODEL_AMBIENT.xyz + VertexLighting(…)</td><td align="left">include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl”</td></tr></tbody></table><p>可以在 Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Common.hlsl 中找到一些通用函数</p><h2 id="内置的着色器变量"><a href="#内置的着色器变量" class="headerlink" title="内置的着色器变量"></a>内置的着色器变量</h2><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">_LightColor0</td><td align="left">_MainLightColor</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Input.hlsl”</td></tr><tr><td align="left">_WorldSpaceLightPos0</td><td align="left">_MainLightPosition</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Input.hlsl”</td></tr><tr><td align="left">_LightMatrix0</td><td align="left">可能还不支持</td><td align="left"></td></tr><tr><td align="left">unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0</td><td align="left">URP中，额外的灯光存储在一个数组或缓冲中(取决于平台),使用Light GetAdditionalLight(uint i, float3 positionWS)获取光照信息</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl”</td></tr><tr><td align="left">unity_4LightAtten0</td><td align="left">URP中，额外的灯光存储在一个数组或缓冲中(取决于平台),使用Light GetAdditionalLight(uint i, float3 positionWS)获取光照信息</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl”</td></tr><tr><td align="left">unity_LightColor</td><td align="left">URP中，额外的灯光存储在一个数组或缓冲中(取决于平台),使用Light GetAdditionalLight(uint i, float3 positionWS)获取光照信息</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl”</td></tr><tr><td align="left">unity_WorldToShadow</td><td align="left">float4x4 _MainLightWorldToShadow[MAX_SHADOW_CASCADES + 1] or _AdditionalLightsWorldToShadow[MAX_VISIBLE_LIGHTS]</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Shadows.hlsl”</td></tr></tbody></table><p>可以使用GetAdditionalLight(…)获取额外的光源，也可以使用GetAdditionalLightsCount()查询额外的光源数量。</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><p>更多阴影相关函数可以查看 Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Shadows.hlsl</p><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">UNITY_SHADOW_COORDS(x)</td><td align="left">可能没有，可以写作float4 shadowCoord : TEXCOORD0;</td></tr><tr><td align="left">TRANSFER_SHADOW(a)</td><td align="left">a.shadowCoord &#x3D; TransformWorldToShadowCoord(worldSpacePosition)</td></tr><tr><td align="left">SHADOWS_SCREEN</td><td align="left">暂不支持</td></tr></tbody></table><h3 id="雾"><a href="#雾" class="headerlink" title="雾"></a>雾</h3><p>更多雾相关的函数可以查看 Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;ShaderVariablesFunctions.hlsl</p><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th></tr></thead><tbody><tr><td align="left">UNITY_FOG_COORDS(x)</td><td align="left">可能没有，可以写作float fogCoord : TEXCOORD0;</td></tr><tr><td align="left">UNITY_TRANSFER_FOG(o, outpos)</td><td align="left">o.fogCoord &#x3D; ComputeFogFactor(clipSpacePosition.z);</td></tr><tr><td align="left">UNITY_APPLY_FOG(coord, col)</td><td align="left">color &#x3D; MixFog(color, i.fogCoord);</td></tr></tbody></table><h3 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h3><p>可以包含 “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;DeclareDepthTexture.hlsl” 并使用 _CameraDepthTexture来调用深度纹理。也可以使用SampleSceneDepth(…) 和 LoadSceneDepth(…)。</p><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">LinearEyeDepth(sceneZ)</td><td align="left">LinearEyeDepth(sceneZ, _ZBufferParams)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Common.hlsl”</td></tr><tr><td align="left">Linear01Depth(sceneZ)</td><td align="left">Linear01Depth(sceneZ, _ZBufferParams)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Common.hlsl”</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th align="left">Built-in</th><th align="left">URP</th><th align="left">Include</th></tr></thead><tbody><tr><td align="left">ShadeSH9(normal)</td><td align="left">SampleSH(normal)</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Lighting.hlsl”</td></tr><tr><td align="left">unity_ColorSpaceLuminance</td><td align="left">无，使用Luminance()</td><td align="left">Include “Packages&#x2F;com.unity.render-pipelines.core&#x2F;ShaderLibrary&#x2F;Color.hlsl”</td></tr></tbody></table><h2 id="后期-特效"><a href="#后期-特效" class="headerlink" title="后期&#x2F;特效"></a>后期&#x2F;特效</h2><p>URP不支持OnPreCull, OnPreRender, OnPostRender 和 OnRenderImage. 支持 OnRenderObject 和 OnWillRenderObject。RenderPipelineManager提供了渲染管线中注入的位置：</p><ul><li>beginCameraRendering(ScriptableRenderContext context, Camera camera)</li><li>endCameraRendering(ScriptableRenderContext context, Camera camera)</li><li>beginFrameRendering(ScriptableRenderContext context,Camera[] cameras)</li><li>endFrameRendering(ScriptableRenderContext context,Camera[] cameras)</li></ul><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>&#123;<br>RenderPipelineManager.beginCameraRendering += MyCameraRendering;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>&#123;<br>RenderPipelineManager.beginCameraRendering -= MyCameraRendering;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyCameraRendering</span>(<span class="hljs-params">ScriptableRenderContext context, Camera camera</span>)</span><br>&#123;<br>...<br><span class="hljs-keyword">if</span>(camera == myEffectCamera)<br>&#123;<br>...<br>        UniversalRenderPipeline.RenderSingleCamera(context, camera);<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，可以创建ScriptableRendererFeature来实现后期处理效果。可以在管线的不同阶段注入ScriptableRenderPasses：</p><ul><li>BeforeRendering</li><li>BeforeRenderingShadows</li><li>AfterRenderingShadows</li><li>BeforeRenderingPrepasses</li><li>AfterRenderingPrePasses</li><li>BeforeRenderingOpaques</li><li>AfterRenderingOpaques</li><li>BeforeRenderingSkybox</li><li>AfterRenderingSkybox</li><li>BeforeRenderingTransparents</li><li>AfterRenderingTransparents</li><li>BeforeRenderingPostProcessing</li><li>AfterRenderingPostProcessing</li><li>AfterRendering</li></ul><p>下面是一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomRenderPassFeature</span> : <span class="hljs-title">ScriptableRendererFeature</span><br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">CustomRenderPass</span> : <span class="hljs-title">ScriptableRenderPass</span><br>    &#123;<br>        CustomRPSettings _CustomRPSettings;<br>        RenderTargetHandle _TemporaryColorTexture;<br><br>        <span class="hljs-keyword">private</span> RenderTargetIdentifier _Source;<br>        <span class="hljs-keyword">private</span> RenderTargetHandle _Destination;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomRenderPass</span>(<span class="hljs-params">CustomRPSettings settings</span>)</span><br>        &#123;<br>            _CustomRPSettings = settings;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Setup</span>(<span class="hljs-params">RenderTargetIdentifier source, RenderTargetHandle destination</span>)</span><br>        &#123;<br>            _Source = source;<br>            _Destination = destination;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Configure</span>(<span class="hljs-params">CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor</span>)</span><br>        &#123;<br>            _TemporaryColorTexture.Init(<span class="hljs-string">&quot;_TemporaryColorTexture&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params">ScriptableRenderContext context, <span class="hljs-keyword">ref</span> RenderingData renderingData</span>)</span><br>        &#123;<br>            CommandBuffer cmd = CommandBufferPool.Get(<span class="hljs-string">&quot;My Pass&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> (_Destination == RenderTargetHandle.CameraTarget)<br>            &#123;<br>                cmd.GetTemporaryRT(_TemporaryColorTexture.id, renderingData.cameraData.cameraTargetDescriptor, FilterMode.Point);<br>                cmd.Blit(_Source, _TemporaryColorTexture.Identifier());<br>                cmd.Blit(_TemporaryColorTexture.Identifier(), _Source, _CustomRPSettings.m_Material);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cmd.Blit(_Source, _Destination.Identifier(), _CustomRPSettings.m_Material, <span class="hljs-number">0</span>);<br>            &#125;<br><br>            context.ExecuteCommandBuffer(cmd);<br>            CommandBufferPool.Release(cmd);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FrameCleanup</span>(<span class="hljs-params">CommandBuffer cmd</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_Destination == RenderTargetHandle.CameraTarget)<br>            &#123;<br>                cmd.ReleaseTemporaryRT(_TemporaryColorTexture.id);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    [<span class="hljs-meta">System.Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomRPSettings</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> Material m_Material;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> CustomRPSettings m_CustomRPSettings = <span class="hljs-keyword">new</span> CustomRPSettings();<br>    CustomRenderPass _ScriptablePass;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Create</span>()</span><br>    &#123;<br>        _ScriptablePass = <span class="hljs-keyword">new</span> CustomRenderPass(m_CustomRPSettings);<br><br>        _ScriptablePass.renderPassEvent = RenderPassEvent.AfterRenderingOpaques;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddRenderPasses</span>(<span class="hljs-params">ScriptableRenderer renderer, <span class="hljs-keyword">ref</span> RenderingData renderingData</span>)</span><br>    &#123;<br>        _ScriptablePass.Setup(renderer.cameraColorTarget, RenderTargetHandle.CameraTarget);<br>        renderer.EnqueuePass(_ScriptablePass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Singleton</title>
    <link href="/2024/06/17/%E5%8D%95%E4%BE%8B/"/>
    <url>/2024/06/17/%E5%8D%95%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="LazySingleton"><a href="#LazySingleton" class="headerlink" title="LazySingleton"></a>LazySingleton</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">UnityToolkit</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">IDisposable</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">new</span>()<br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Lazy&lt;T&gt; s_instance = <span class="hljs-keyword">new</span> Lazy&lt;T&gt;(() =&gt;<br>        &#123;<br>            T t = <span class="hljs-keyword">new</span> T();<br>            <span class="hljs-keyword">if</span> (t <span class="hljs-keyword">is</span> IOnInit <span class="hljs-keyword">init</span>)<br>            &#123;<br>                <span class="hljs-keyword">init</span>.OnInit();<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> t;<br>        &#125;);<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T Singleton =&gt; s_instance.Value;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (Singleton <span class="hljs-keyword">is</span> IDisposable disposable)<br>            &#123;<br>                disposable.Dispose();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mono-Singleton"><a href="#Mono-Singleton" class="headerlink" title="Mono Singleton"></a>Mono Singleton</h2><p>Unity下基于MonoBehavior和泛型的单例模式</p><ul><li>基于泛型实现</li><li>自动清理静态变量，UnityEditor 下可开启选项<code>播放时不重新加载程序集</code>。</li><li>支持场景和全局单例</li><li>支持自动创建</li></ul><figure class="highlight csharp"><figcaption><span>MonoSingleton.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">UnityToolkit</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IOnlyPlayingModelSingleton</span><br>    &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IAutoCreateSingleton</span><br>    &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MonoSingleton</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">MonoBehaviour</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">MonoSingleton</span>&lt;<span class="hljs-title">T</span>&gt;<br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> T _singleton;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">DontDestroyOnLoad</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T SingletonNullable =&gt; _singleton;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T Singleton<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-comment">// 如果T是仅在播放模式下的单例</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(IOnlyPlayingModelSingleton).IsAssignableFrom(<span class="hljs-keyword">typeof</span>(T)))<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (Application.isPlaying == <span class="hljs-literal">false</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;<br><br><br>                <span class="hljs-keyword">if</span> (_singleton != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> _singleton; <span class="hljs-comment">//第一次访问</span><br>                _singleton = FindObjectOfType&lt;T&gt;(); <span class="hljs-comment">// 从场景中查找</span><br>                <span class="hljs-keyword">if</span> (_singleton != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    _singleton.OnSingletonInit(); <span class="hljs-comment">//手动初始化</span><br>                    <span class="hljs-keyword">return</span> _singleton;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(IAutoCreateSingleton).IsAssignableFrom(<span class="hljs-keyword">typeof</span>(T)))<br>                &#123;<br>                    GameObject go = <span class="hljs-keyword">new</span> GameObject(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>&quot;</span>);<br>                    _singleton = go.AddComponent&lt;T&gt;();<br>                    _singleton.OnSingletonInit();<br>                    <span class="hljs-keyword">return</span> _singleton;<br>                &#125;<br><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullReferenceException(<span class="hljs-string">$&quot;Singleton&lt;<span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span>&gt;.Singleton -&gt; <span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(T).Name&#125;</span> is null&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnSingletonInit</span>()</span><br>        &#123;<br>            <span class="hljs-comment">// Debug.Log($&quot;Singleton&lt;&#123;typeof(T).Name&#125;&gt;.OnInit() -&gt; &#123;gameObject.name&#125;&quot;);</span><br>            transform.SetParent(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (DontDestroyOnLoad())<br>            &#123;<br>                DontDestroyOnLoad(gameObject);<br>            &#125;<br><br>            OnInit();<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//Awake时如果还没有被访问 则将自己赋值给_singleton</span><br>            <span class="hljs-keyword">if</span> (_singleton == <span class="hljs-literal">null</span>)<br>            &#123;<br>                _singleton = <span class="hljs-keyword">this</span> <span class="hljs-keyword">as</span> T;<br>                <span class="hljs-comment">// Debug.Log($&quot;Singleton&lt;&#123;typeof(T).Name&#125;&gt;.Awake() -&gt; &#123;gameObject.name&#125;&quot;);</span><br>                _singleton.OnSingletonInit();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//如果已经被访问过 则销毁自己</span><br>            <span class="hljs-keyword">if</span> (_singleton != <span class="hljs-keyword">this</span>)<br>            &#123;<br>                Destroy(gameObject);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInit</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDispose</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_singleton == <span class="hljs-keyword">this</span>)<br>            &#123;<br>                _singleton.OnDispose();<br>                _singleton = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">// Unity 2022 后 生命周期变更 OnApplicationQuit -&gt; OnDisable -&gt; OnDestroy</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnApplicationQuit</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_singleton == <span class="hljs-keyword">this</span>)<br>            &#123;<br>                _singleton.OnDispose();<br>                _singleton = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><br>        [<span class="hljs-meta">RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSplashScreen)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ResetStatic</span>()</span><br>        &#123;<br>            _singleton = <span class="hljs-literal">null</span>;<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
